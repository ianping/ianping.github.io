import{_ as s,c as a,b as n,o as h}from"./app-DsGHT65_.js";const l="/assets/thread-lifecycle-Bfbej3ZF.png",t={};function k(e,i){return h(),a("div",null,i[0]||(i[0]=[n(`<h2 id="线程名称" tabindex="-1"><a class="header-anchor" href="#线程名称"><span>线程名称</span></a></h2><p>可以在创建线程时，使用构造器参数设置线程的名称，或者在线程创建后，使用<code>setName(String)</code>方法设置；不设置时，会有默认的名称。</p><p>获取线程的名称，可以使用<code>getName()</code>方法。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> task </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> currentThread </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">线程A</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程优先级" tabindex="-1"><a class="header-anchor" href="#线程优先级"><span>线程优先级</span></a></h2><p>线程的调度模型主要有2类：</p><ul><li>分时调度模型，所有线程轮流占用CPU时间片</li><li>抢占式调度模型，按照线程的优先级分配CPU时间片。理论上说，优先级越高的线程，获得CPU时间片的机会越大。</li></ul><p>Java线程的管理与调度是委托给操作系统的，目前，大部分操作系统均使用抢占式调度模型。</p><p>线程优先级从低到高为1-10，<code>Thread</code>类中定义了几个常量字段</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> MIN_PRIORITY </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> NORM_PRIORITY </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> MAX_PRIORITY </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程优先级相关API如下：</p><ul><li><code>Thread#setPriority(int)</code>，设置优先级</li><li><code>Thread#getPriority()</code>，获取优先级</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> ThreadLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> ThreadLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">withInitial</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> maxCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> task </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">maxCount</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getAndDecrement</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">            count</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">            System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">%s: %d%n</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(),</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">线程A</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    t1</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">MAX_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">线程B</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    t2</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">NORM_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> t3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">线程C</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    t2</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">MIN_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    t1</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    t2</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    t3</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="守护线程" tabindex="-1"><a class="header-anchor" href="#守护线程"><span>守护线程</span></a></h2><p>Java线程分为用户线程（User Thread）和守护线程（Daemon Thread）2种，所有用户线程退出后，守护线程随着JVM一起退出。</p><p><code>Thread#setDaemon()</code>方法设置线程是否为守护线程，<code>Thread#isDaemon()</code>返回线程是否为守护线程。</p><h2 id="线程休眠" tabindex="-1"><a class="header-anchor" href="#线程休眠"><span>线程休眠</span></a></h2><p>调用<code>Thread#sleep()</code>静态方法，可以让当前线程暂停指定的时间</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">1000L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;"> // 1000ms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">1000L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;"> // 1000ms + 5000ns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> catch</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，使用<code>TimeUnit</code>中几个内部类的<code>sleep()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">MILLISECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">1000L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">SECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">MINUTES</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> catch</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程中断" tabindex="-1"><a class="header-anchor" href="#线程中断"><span>线程中断</span></a></h2><p><code>Thread#stop()</code>方法用于停止线程；</p><p><code>Thread#interrupt()</code>方法用于中断线程</p><h2 id="线程让步" tabindex="-1"><a class="header-anchor" href="#线程让步"><span>线程让步</span></a></h2><p><code>Thread#yield</code>静态方法，告诉线程调度器，当前线程暂时放弃对CPU的占用。结果不可预测。</p><h2 id="线程合并" tabindex="-1"><a class="header-anchor" href="#线程合并"><span>线程合并</span></a></h2><p><code>Thread#join</code>方法，将另一个线程合并到当前线程中，先执行合并进来的线程，再继续执行当前线程。</p><h2 id="线程生命周期" tabindex="-1"><a class="header-anchor" href="#线程生命周期"><span>线程生命周期</span></a></h2><p>Java线程有6种状态</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    RUNNABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    BLOCKED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    WAITING</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    TIMED_WAITING</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    TERMINATED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时序图如下：</p><p><img src="`+l+'" alt=""></p>',35)]))}const F=s(t,[["render",k],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/notes/java/dvbeggbz/","title":"Java线程属性与基本操作","lang":"zh-CN","frontmatter":{"title":"Java线程属性与基本操作","createTime":"2024/11/24 15:56:15","permalink":"/notes/java/dvbeggbz/"},"headers":[],"readingTime":{"minutes":2.09,"words":627},"git":{"updatedTime":1733057441000,"contributors":[{"name":"ianping","email":"13520322212@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/ianping?v=4","url":"https://github.com/ianping"}]},"filePathRelative":"notes/java/2.Java并发编程/Java线程属性与基本操作.md","bulletin":false}');export{F as comp,d as data};
