import{_ as s,c as a,b as n,o as h}from"./app-DsGHT65_.js";const l={};function e(t,i){return h(),a("div",null,i[0]||(i[0]=[n(`<h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h2><h3 id="事务acid特性" tabindex="-1"><a class="header-anchor" href="#事务acid特性"><span>事务ACID特性</span></a></h3><p>原子性、一致性、隔离性、持久性</p><h3 id="脏读、不可重复读、幻读" tabindex="-1"><a class="header-anchor" href="#脏读、不可重复读、幻读"><span>脏读、不可重复读、幻读</span></a></h3><ul><li>脏读，事务A修改了某些数据，但尚未提交；事务B读取了这些未提交的数据</li><li>不可重复读，事务A读取了某些数据；事务B修改了这些数据并提交，导致事务A再次读取同样的数据时，得到不一样的结果</li><li>幻读，事务A读取某个范围内的几条数据，尚未提交；此时，事务B插入了一条新的数据，并提交；事务A再次读取同一范围内的数据时，结果集中出现了新的数据。</li></ul><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h3><ul><li>READ UNCOMMITTED（读未提交），存在脏读、不可重复读、幻读的问题</li><li>READ COMMITTED（读已提交），存在不可重复读、幻读的问题</li><li>REPEATABLE READ（可重复读），存在幻读的问题</li><li>SERIALIZABLE（序列化）</li></ul><h3 id="mvcc机制" tabindex="-1"><a class="header-anchor" href="#mvcc机制"><span>MVCC机制</span></a></h3><p>MVCC（Multi-Version Concurrency Control，多版本并发控制）。</p><p>核心思想：</p><ol><li><strong>版本控制：</strong> 在执行数据更新操作时，不是直接覆盖原始数据，而是生成一个新的数据版本，并将新版本的数据写入到数据库中。这样，原始数据仍然保留在数据库中，不会被覆盖。</li><li><strong>版本检查：</strong> 在执行查询操作时，数据库会根据事务的隔离级别，检查事务开始时数据库中的数据版本，并根据数据版本的可见性规则来确定事务能够看到哪些数据。</li></ol><h3 id="mysql锁" tabindex="-1"><a class="header-anchor" href="#mysql锁"><span>MySQL锁</span></a></h3><ul><li><p>表锁</p></li><li><p>行级锁，InnoDB 存储引擎使用行级锁</p></li><li><p>页锁</p></li><li><p>间隙锁，锁定记录前后的间隙，防止幻读</p></li></ul><p>死锁问题</p><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h3><h4 id="mysql中索引的类型" tabindex="-1"><a class="header-anchor" href="#mysql中索引的类型"><span>MySQL中索引的类型</span></a></h4><p>B-Tree索引</p><p>自适应哈希索引</p><p>全文索引</p><p>单列索引、多列索引、前缀索引</p><h4 id="mysql索引匹配规则" tabindex="-1"><a class="header-anchor" href="#mysql索引匹配规则"><span>MySQL索引匹配规则</span></a></h4><p>全值匹配</p><p>最左前缀匹配</p><p>列前缀匹配</p><p>范围匹配</p><h4 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引"><span>聚簇索引</span></a></h4><p>聚簇索引将数据行存储在索引的叶子节点中，而非聚簇索引只存储指向数据行的指针。</p><p>InnoDB默认使用主键作为聚簇列；如果没有主键，则选择一个唯一非空索引代替；如果没有，隐式创建一个主键作为聚簇索引列。</p><h4 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引"><span>覆盖索引</span></a></h4><p>一个查询可以通过索引直接获取所需要的数据，而不需要回表查询。</p><h3 id="sql优化" tabindex="-1"><a class="header-anchor" href="#sql优化"><span>sql优化</span></a></h3><h3 id="explain查看sql执行计划" tabindex="-1"><a class="header-anchor" href="#explain查看sql执行计划"><span><code>explain</code>查看sql执行计划</span></a></h3><h3 id="慢查询优化" tabindex="-1"><a class="header-anchor" href="#慢查询优化"><span>慢查询优化</span></a></h3><ol><li>使用<code>explain</code>分析sql执行计划</li><li>优化索引</li><li>优化查询条件</li><li>优化表结构</li><li>分析数据量，考虑分库、分表</li><li>使用缓存</li><li>定期优化数据库，索引优化、更新索引统计信息</li></ol><h3 id="mysql主从同步原理" tabindex="-1"><a class="header-anchor" href="#mysql主从同步原理"><span>MySQL主从同步原理</span></a></h3><h3 id="mysql分区、分库、分表" tabindex="-1"><a class="header-anchor" href="#mysql分区、分库、分表"><span>MySQL分区、分库、分表</span></a></h3><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h2><h3 id="redis支持的数据结构" tabindex="-1"><a class="header-anchor" href="#redis支持的数据结构"><span>Redis支持的数据结构</span></a></h3><p>字符串、列表、集合、有序集合、哈希、Bitmap、HyperlogLog、地理空间坐标</p><h3 id="bitmap数据结构" tabindex="-1"><a class="header-anchor" href="#bitmap数据结构"><span>Bitmap数据结构</span></a></h3><h3 id="hyperloglog数据结构" tabindex="-1"><a class="header-anchor" href="#hyperloglog数据结构"><span>HyperlogLog数据结构</span></a></h3><h3 id="redis事务" tabindex="-1"><a class="header-anchor" href="#redis事务"><span>Redis事务</span></a></h3><p><code>multi</code>、<code>exec</code>、<code>discard</code>、<code>watch</code>、<code>unwatch</code></p><h3 id="rdb和aof持久化机制" tabindex="-1"><a class="header-anchor" href="#rdb和aof持久化机制"><span>RDB和AOF持久化机制</span></a></h3><h3 id="redis主从复制" tabindex="-1"><a class="header-anchor" href="#redis主从复制"><span>Redis主从复制</span></a></h3><p>主从拓扑结构：一主一从、一主多从、多层结构。</p><p>主从复制的流程：保存主节点信息、建立socket连接、发送ping命令、验证权限、全量复制、增量复制</p><h3 id="redis哨兵" tabindex="-1"><a class="header-anchor" href="#redis哨兵"><span>Redis哨兵</span></a></h3><p>哨兵节点、数据节点（主节点+从节点）。</p><h3 id="redis集群" tabindex="-1"><a class="header-anchor" href="#redis集群"><span>Redis集群</span></a></h3><p>数据分区的方式：节点取余分区、一致性哈希分区（哈希环）、<strong>虚拟槽分区</strong>。</p><h3 id="redis应用场景" tabindex="-1"><a class="header-anchor" href="#redis应用场景"><span>Redis应用场景</span></a></h3><p>计数器、访问频率限制、缓存、HTTP Session共享、排行榜、实现栈和队列、分布式锁</p><h3 id="redis缓存" tabindex="-1"><a class="header-anchor" href="#redis缓存"><span>Redis缓存</span></a></h3><p><strong>缓存更新策略：</strong></p><ul><li>超出设置的最大内存后剔除：设置缓存最大内存占用，超出设置值后剔除最早的缓存</li><li>超时剔除</li><li>主动更新</li></ul><p><strong>缓存穿透、击穿、雪崩：</strong></p><ul><li><p>缓存击穿：缓存层未命中、存储层命中，频繁查询导致存储层负载过高。</p></li><li><p>缓存穿透：缓存层和存储层都未命中。</p></li><li><p>缓存雪崩：缓存中大量的key均为命中、存储层压力过大导致崩溃</p></li></ul><p>优化措施，核心就是保证缓存层高可用：</p><ul><li>缓存空值</li><li>使用布隆过滤器，过滤不存在的key</li><li>延长热点Key过期时间</li><li>给访问存储层的代码加互斥锁，只允许一个线程查询数据库、更新缓存</li><li>接口限流</li><li>采用高可用架构：读写分离、哨兵、集群</li></ul><h3 id="慢查询问题" tabindex="-1"><a class="header-anchor" href="#慢查询问题"><span>慢查询问题</span></a></h3><p><code>slowlog get [count]</code></p><h3 id="bigkey问题" tabindex="-1"><a class="header-anchor" href="#bigkey问题"><span>BigKey问题</span></a></h3><p>BigKey危害：集群中内存分布不均匀、Redis阻塞、网络超时</p><p>发现BigKey：<code>redis-cli --bigkeys</code></p><p>删除BigKey：字符串类型可以直接删除，非字符串类型推荐分批删除</p><h3 id="hotkey问题" tabindex="-1"><a class="header-anchor" href="#hotkey问题"><span>HotKey问题</span></a></h3><p>延长热点Key过期时间、如果热点Key包含2级数据，可将其拆分为多个Key。</p><h3 id="redis实现分布式锁" tabindex="-1"><a class="header-anchor" href="#redis实现分布式锁"><span>Redis实现分布式锁</span></a></h3><p><strong>基于setnx和expire</strong></p><p>考虑使用lua脚本保证加锁、释放锁等操作的原子性</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    Jedis</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> RedisClient</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getClient</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> mutexLockKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">mutex:%s</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    SetParams</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> SetParams</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setParams</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">nx</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">5L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">mutexLockKey</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> params</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">        // 获取锁成功:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">            // 执行业务代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">            // 释放锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">            redis</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">del</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">mutexLockKey</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">        // 获取锁失败: 休眠一段时间后重试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">            TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">SECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">5L</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">            foo</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> catch</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">            e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用Redission</strong></p><p>略</p><h2 id="消息中间件" tabindex="-1"><a class="header-anchor" href="#消息中间件"><span>消息中间件</span></a></h2><h3 id="rabbitmq架构模式" tabindex="-1"><a class="header-anchor" href="#rabbitmq架构模式"><span>RabbitMQ架构模式</span></a></h3><p>消息发布者、消息消费者、交换机、队列、绑定、路由键</p><h3 id="rabbitmq交换机类型" tabindex="-1"><a class="header-anchor" href="#rabbitmq交换机类型"><span>RabbitMQ交换机类型</span></a></h3><ul><li><p>direct：直接交换机，路由键完全匹配</p></li><li><p>fanout：广播模式</p></li><li><p>topic：主题模式 <code>a.*.*</code>、<code>a.#</code></p></li><li><p>headers：消息headers属性</p></li></ul><h3 id="rabbitmq如何解决消息积压的问题" tabindex="-1"><a class="header-anchor" href="#rabbitmq如何解决消息积压的问题"><span>RabbitMQ如何解决消息积压的问题</span></a></h3><ul><li>消费者限流：使用公平分发策略（<code>Channel#basicQos</code>方法），设置每个消费者能够同时处理的未确认消息的最大数量</li><li>设置消息TTL，自动删除过期消息</li><li>限制队列长度：设置队列的最大长度，超出队列长度限制时，RabbitMQ自动删除最早的消息</li><li>死信队列：声明队列时，设置死信交换器，将无法处理的消息路由到死信队列，监控死信队列中的消息数量来识别和处理消息积压问题</li><li>限制消息发送方发送消息的频率，增大消息消费方消费消息的能力</li></ul><h3 id="rabbitmq如何保证消息的可靠性" tabindex="-1"><a class="header-anchor" href="#rabbitmq如何保证消息的可靠性"><span>RabbitMQ如何保证消息的可靠性</span></a></h3><ul><li>确保消息成功发送到交换机：事务机制、消息发布方确认机制</li><li>确保消息被消费后才从消息队列删除：消息消费方确认机制</li><li>持久化：持久化交换机、队列、消息</li><li>备用交换机：声明交换机时，设置备用交换机，将无法处理的消息转发到备用交换机，进而路由到备用消息队列</li></ul><h3 id="rabbitmq死信队列、延迟队列、优先级队列" tabindex="-1"><a class="header-anchor" href="#rabbitmq死信队列、延迟队列、优先级队列"><span>RabbitMQ死信队列、延迟队列、优先级队列</span></a></h3><h2 id="elk" tabindex="-1"><a class="header-anchor" href="#elk"><span>ELK</span></a></h2><h2 id="minio" tabindex="-1"><a class="header-anchor" href="#minio"><span>MinIO</span></a></h2>`,86)]))}const r=s(l,[["render",e],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/notes/interview/st8aupzd/","title":"数据库和中间件面试题","lang":"zh-CN","frontmatter":{"title":"数据库和中间件面试题","createTime":"2024/11/24 15:56:15","permalink":"/notes/interview/st8aupzd/"},"headers":[],"readingTime":{"minutes":5.8,"words":1740},"git":{"updatedTime":1733057441000,"contributors":[{"name":"ianping","email":"13520322212@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/ianping?v=4","url":"https://github.com/ianping"}]},"filePathRelative":"notes/interview/数据库和中间件面试题.md","bulletin":false}');export{r as comp,d as data};
