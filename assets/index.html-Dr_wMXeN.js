import{_ as s,c as a,b as n,o as e}from"./app-DsGHT65_.js";const l={};function h(t,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="javase、javaee、javame" tabindex="-1"><a class="header-anchor" href="#javase、javaee、javame"><span>JavaSE、JavaEE、JavaME</span></a></h3><h3 id="jdk、jre、jvm" tabindex="-1"><a class="header-anchor" href="#jdk、jre、jvm"><span>JDK、JRE、JVM</span></a></h3><h3 id="jit、aot" tabindex="-1"><a class="header-anchor" href="#jit、aot"><span>JIT、AOT</span></a></h3><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h2><h3 id="goto和const保留字" tabindex="-1"><a class="header-anchor" href="#goto和const保留字"><span><code>goto</code>和<code>const</code>保留字</span></a></h3><h3 id="strictfp" tabindex="-1"><a class="header-anchor" href="#strictfp"><span><code>strictfp</code></span></a></h3><p>修饰在类、接口、方法。</p><p><code>strictfp</code>表示执行严格的浮点运算，保证在不同平台得到相同的运算结果。</p><h3 id="transient" tabindex="-1"><a class="header-anchor" href="#transient"><span><code>transient</code></span></a></h3><p>修饰字段。</p><p>当一个字段被标记为 <code>transient</code> 时，它表示该字段不会被序列化：</p><ul><li>在对象被序列化时，这个字段的值不会被保存。</li><li>当对象被反序列化时，被标记为 <code>transient</code> 的字段会被赋予默认值。</li></ul><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span><code>volatile</code></span></a></h3><p>修饰字段。</p><p>主要由2个作用：</p><ul><li>保证可见性</li><li>禁止指令重排序优化</li></ul><h3 id="native" tabindex="-1"><a class="header-anchor" href="#native"><span><code>native</code></span></a></h3><p>修饰方法。</p><p><code>native</code>方法通过JNI调用本地代码。</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="自增、自减" tabindex="-1"><a class="header-anchor" href="#自增、自减"><span>自增、自减</span></a></h3><p>分为前缀和后缀2种形式：</p><ul><li>前缀：先自增、自减，再参与运算</li><li>后缀：先参与运算，再自增、自减</li></ul><h3 id="移位" tabindex="-1"><a class="header-anchor" href="#移位"><span>移位</span></a></h3><p>2进制移位运算：</p><ul><li><code>&lt;&lt;</code>：左移，低位补0</li><li><code>&gt;&gt;</code>：右移，高位用原有符号位补齐</li><li><code>&gt;&gt;&gt;</code>：无符号右移，高位补0</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="_4类8种基本数据类型" tabindex="-1"><a class="header-anchor" href="#_4类8种基本数据类型"><span>4类8种基本数据类型</span></a></h3><ul><li>整型：<code>byte</code> <code>short</code> <code>int</code> <code>long</code></li><li>浮点型：<code>float</code> <code>double</code></li><li>字符：<code>char</code></li><li>布尔：<code>boolean</code></li></ul><h3 id="包装类型、自动装箱和自动拆箱" tabindex="-1"><a class="header-anchor" href="#包装类型、自动装箱和自动拆箱"><span>包装类型、自动装箱和自动拆箱</span></a></h3><p>包装类型包括8种基本数据类型的包装类和<code>Void</code>。</p><p>其中，<code>boolean</code>, <code>byte</code>, 0-127之间的<code>char</code>, -128-127之间的<code>short</code>与<code>int</code>，被包装到固定的对象中。</p><h3 id="biginteger和bigdecimal" tabindex="-1"><a class="header-anchor" href="#biginteger和bigdecimal"><span><code>BigInteger</code>和<code>BigDecimal</code></span></a></h3><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h2><h3 id="面向对象3大特性" tabindex="-1"><a class="header-anchor" href="#面向对象3大特性"><span>面向对象3大特性</span></a></h3><p>封装、继承、多态。</p><h3 id="类中包括哪些成员" tabindex="-1"><a class="header-anchor" href="#类中包括哪些成员"><span>类中包括哪些成员</span></a></h3><ul><li>成员变量：实例成员变量和静态(类)成员变量</li><li>成员方法：实例成员方法和静态(类)成员方法</li><li>构造器：无参、有参</li><li>构造代码块</li><li>静态代码块</li><li>内部类：实例内部类和静态内部类</li></ul><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h3><p>4种：</p><ul><li><code>private</code></li><li>default，默认访问级别，包访问级别</li><li><code>protected</code>，相同包、子类可见</li><li><code>public</code></li></ul><h3 id="方法重载和重写" tabindex="-1"><a class="header-anchor" href="#方法重载和重写"><span>方法重载和重写</span></a></h3><h4 id="方法重载" tabindex="-1"><a class="header-anchor" href="#方法重载"><span>方法重载</span></a></h4><p>同一个类中，具有相同方法名、不同参数列表（参数数量、类型、顺序）的方法。</p><h4 id="方法重写" tabindex="-1"><a class="header-anchor" href="#方法重写"><span>方法重写</span></a></h4><p>子类中重新定义与父类中方法签名（方法名称、参数列表、返回值类型）相同的方法。</p><p>注意：</p><ul><li>子类方法的访问修饰符不能比父类更严格（更小）</li><li>子类方法中不能抛出比父类方法更多的异常，或者不兼容的异常</li><li>子类方法不能是<code>static</code>方法</li><li>子类方法推荐使用<code>@Override</code>注解</li></ul><h3 id="final关键字" tabindex="-1"><a class="header-anchor" href="#final关键字"><span><code>final</code>关键字</span></a></h3><ul><li>final类，不能被继承</li><li>final方法，不能被子类重写</li><li>final变量，表示常量，使用前必须进行显式赋值</li><li>final引用，被赋值后，不能再指向其它对象，但是对象本身的属性可以修改</li><li>final参数，只读参数</li></ul><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类"><span>内部类</span></a></h3><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h3><p>Java接口使用<code>interface</code>定义，遵循以下规则：</p><ul><li>接口中的变量都是静态成员变量，自动使用<code>public static final</code>修饰</li><li>接口中的方法自动使用<code>public abstract</code>修饰</li><li>类只能“单继承”类，但可以“多实现”接口</li><li>接口可以继承多个其它接口</li></ul><p>另外，Java8支持在接口中定义默认方法和静态方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> MyInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Closeable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // public static final int a = 1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // public abstract void foo();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // public static void bar(){}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // public default void baz(){}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    default</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变数量参数" tabindex="-1"><a class="header-anchor" href="#可变数量参数"><span>可变数量参数</span></a></h3><p>方法可以接收可变数量的参数，用于接收0或多个相同类型的值。其本质是一个数组。</p><p>语法是在数据类型后用3个点表示，必须放到参数列表的末尾：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> PrintStream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与-equals-的区别" tabindex="-1"><a class="header-anchor" href="#与-equals-的区别"><span><code>==</code> 与 <code>equals()</code>的区别</span></a></h3><p><code>==</code>和<code>equals()</code>都用于比较对象之间的相等性：</p><ul><li>对于基本数据类型，<code>==</code>比较值是否相等</li><li>对于引用数据类型，<code>==</code>比较引用（对象地址）是否相等，<code>equals</code>比较对象的内容是否相等</li></ul><p><code>equals()</code>是<code>Object</code>中定义的方法，默认比较对象引用是否相等（与<code>==</code>一样），一般子类都需要重写<code>equals()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浅拷贝与深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝与深拷贝"><span>浅拷贝与深拷贝</span></a></h3><p>浅拷贝：只会拷贝对象本身，对于对象内部的引用类型属性，只会拷贝其引用的地址。</p><p>深拷贝：拷贝对象及其内部的全部属性的值。</p><p>Java中，通过重写<code>Object#clone()</code>方法实现拷贝，一般也会实现<code>Cloneable</code>标记接口。</p><p><code>Object</code>中的<code>clone()</code>是一个用<code>protected</code>修饰的<code>native</code>方法，默认进行浅拷贝。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> native</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> throws CloneNotSupportedException</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重写<code>clone()</code>方法时，一般会将其声明为<code>public</code>方法。下面是一个深拷贝的例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Cloneable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // 省略其它代码...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Prototype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> out </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">            ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> objectOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">            objectOut</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">ByteArrayInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> in </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> ByteArrayInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">                ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> objectIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> objectIn</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> catch</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> ClassNotFoundException</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashcode-方法" tabindex="-1"><a class="header-anchor" href="#hashcode-方法"><span><code>hashCode()</code>方法</span></a></h3><p><code>hashCode()</code>是<code>Object</code>类中定义的方法，用户计算并返回对象的哈希值。</p><p><code>HashSet</code>、<code>HashMap</code>等数据结构的实现中，用于计算2个对象是否相等时：</p><ul><li>先调用<code>hashCode()</code>，比较其哈希值</li><li>如果哈希值相等，再调用<code>equals()</code>，比较其内容是否相等</li></ul><p>哈希值相等，<code>equals()</code>不一定返回true。</p><p>一般会同时重写<code>hashCode()</code>和<code>equals()</code>方法。</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><h3 id="string的不可变性" tabindex="-1"><a class="header-anchor" href="#string的不可变性"><span><code>String</code>的不可变性</span></a></h3><p><code>String</code>是不可变的，保证不可变的2个手段，见源码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 1.类使用final修饰</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    implements</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> java.io.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;">Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> CharSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;">Constable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> ConstantDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // 2.保存内容的字节数组使用private final修饰</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Stable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuilder和stringbuffer的区别" tabindex="-1"><a class="header-anchor" href="#stringbuilder和stringbuffer的区别"><span><code>StringBuilder</code>和<code>StringBuffer</code>的区别</span></a></h3><p><code>StringBuilder</code>是线程不安全的，性能较好；</p><p><code>StringBuiifer</code>是线程安全的，其写操作方法都是<code>synchronized</code>方法。</p><h3 id="字符串常量池" tabindex="-1"><a class="header-anchor" href="#字符串常量池"><span>字符串常量池</span></a></h3><p>字符串常量池是位于Java堆中的一块内存区域，用于缓存字符串对象。</p><p><code>String#intern()</code>方法用于将字符串对象添加到常量池中：</p><ul><li>如果常量池中已有相同的字符串对象，直接返回已有字符串对象的引用；</li><li>否则，在常量池中创建字符串对象，并返回新的字符串对象的引用</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // true, 直接引用常量池中的&quot;Hello&quot;,引用相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // false, c是新创建的对象,引用不同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // true, c.intern()将c添加到常量池,已存在相同的字符串对象,返回已存在的对象引用,因此与a的引用相同</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><h3 id="异常体系" tabindex="-1"><a class="header-anchor" href="#异常体系"><span>异常体系</span></a></h3><p><code>Throwable</code>接口</p><ul><li><code>Error</code></li><li><code>Exception</code><ul><li><code>RuntimeException</code>，非检查异常</li><li>其它异常都是检查异常</li></ul></li></ul><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><ul><li>try...catch...finally</li><li>try-with-resource，可用于任何实现了<code>java.lang.AutoCloseable</code>接口的资源</li></ul><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><h3 id="定义泛型类和泛型方法" tabindex="-1"><a class="header-anchor" href="#定义泛型类和泛型方法"><span>定义泛型类和泛型方法</span></a></h3><h3 id="使用extends限定类型参数" tabindex="-1"><a class="header-anchor" href="#使用extends限定类型参数"><span>使用<code>extends</code>限定类型参数</span></a></h3><p>泛型可以使用<code>extends</code>关键字指定限定类型：</p><ul><li>可以指定多个限定类型参数，使用<code>&amp;</code>分割</li><li>多个限定类型中，最多只能包含一个类类型，且必须是限定类型列表中的第一个</li></ul><h3 id="通配符类型" tabindex="-1"><a class="header-anchor" href="#通配符类型"><span><code>?</code>通配符类型</span></a></h3><ul><li><code>&lt;?&gt;</code></li><li><code>&lt;? extends Type&gt;</code>，子类型限定通配符</li><li><code>&lt;? super Type&gt;</code>，超类型限定通配符</li></ul><h3 id="类型擦除" tabindex="-1"><a class="header-anchor" href="#类型擦除"><span>类型擦除</span></a></h3><p>在编译期间，泛型类型会被擦除：</p><ul><li>如果泛型没有限定类型，类型擦除后为<code>Object</code></li><li>如果有限定类型，类型擦除后为第一个限定类型</li></ul><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><p>核心API：</p><ul><li><code>Class&lt;T&gt;</code></li><li><code>Constructor&lt;T&gt;</code></li><li><code>Field</code></li><li><code>Method</code></li><li><code>Annotation</code></li></ul><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h2><h3 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理"><span>静态代理</span></a></h3><p>是一种设计模式，代理类和目标类实现相同的接口，代理类中定义一个共同接口类型的成员变量，用于接收目标类对象，在内部调用目标类方法。客户端通过代理类间接执行目标类的方法。</p><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h3><p>分为JDK动态代理和CGLIB动态代理。</p><p>JDK动态代理是基于接口的代理模式，核心API包括：<code>Proxy</code>和<code>InvocationHandler</code>；</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> classLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 目标对象类和代理对象类要实现的接口数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;[]</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> interfaces </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 目标对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> realSubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// InvocationHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">InvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> invocationHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> MyInvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">realSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 动态创建代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">newProxyInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">classLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> interfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> invocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CGLIB动态代理是基于类的代理模式，通过动态生成字节码的方式，动态创建目标类的子类。核心API包括：<code>Enhancer</code>和<code>MethodInterceptor</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> enhancer </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> Enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> MyMethodInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h3><ul><li><p><code>@Documented</code>，注解是否会被javadoc工具记录到文档中</p></li><li><p><code>@Inherited</code>，注解是否可以被子类继承，当一个类使用了被<code>@Inherited</code>标注的注解时，如果这个类被继承，那么子类将自动继承父类的注解</p></li><li><p><code>@Retention</code>，指定注解的生命周期</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> RetentionPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // 编译时</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    SOURCE</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // 类加载时</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    CLASS</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">	// 运行时</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    RUNTIME</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@Target</code>，注解可使用到的位置（类、构造器、字段、方法、参数...）</p></li><li><p><code>@Repeatable</code>，注解是否可以被重复使用</p></li></ul><h3 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Inherited</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">RetentionPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">RUNTIME</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> ElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> ElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">METHOD </span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> MyAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o"><span>I/O</span></a></h2><p>输入、输出流</p><p>字节流、字符流</p><h2 id="集合框架" tabindex="-1"><a class="header-anchor" href="#集合框架"><span>集合框架</span></a></h2><p><code>Collection&lt;E&gt;</code>：</p><ul><li><code>List&lt;E&gt;</code><ul><li><code>ArrayList&lt;E&gt;</code></li><li><code>LinkedList&lt;E&gt;</code></li></ul></li><li><code>Set&lt;E&gt;</code><ul><li><code>HashSet&lt;E&gt;</code></li><li><code>LinkedHashSet&lt;E&gt;</code></li><li><code>TreeSet&lt;E&gt;</code></li></ul></li></ul><p><code>Map&lt;K,V&gt;</code>：</p><ul><li><code>HashMap&lt;K,V&gt;</code></li><li><code>LinkedHashMap&lt;K,V&gt;</code></li><li><code>TreeMap&lt;K,V&gt;</code></li></ul><h4 id="arraylist的实现原理" tabindex="-1"><a class="header-anchor" href="#arraylist的实现原理"><span><code>ArrayList</code>的实现原理</span></a></h4><p>Object数组</p><h4 id="linkedlist的实现原理" tabindex="-1"><a class="header-anchor" href="#linkedlist的实现原理"><span><code>LinkedList</code>的实现原理</span></a></h4><p>双向链表</p><h4 id="hashmap的实现原理" tabindex="-1"><a class="header-anchor" href="#hashmap的实现原理"><span><code>HashMap</code>的实现原理</span></a></h4><p>数组+链表、红黑树</p><h4 id="treemap的实现原理" tabindex="-1"><a class="header-anchor" href="#treemap的实现原理"><span><code>TreeMap</code>的实现原理</span></a></h4><p>红黑树</p><h2 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程"><span>并发编程</span></a></h2><h3 id="线程基础操作" tabindex="-1"><a class="header-anchor" href="#线程基础操作"><span>线程基础操作</span></a></h3><p>线程名称、线程分组</p><p>守护线程</p><p>线程优先级</p><p>线程休眠、中断、让步、合并</p><p>线程生命周期</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    RUNNABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    BLOCKED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    WAITING</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    TIMED_WAITING</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    TERMINATED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建线程的方式" tabindex="-1"><a class="header-anchor" href="#创建线程的方式"><span>创建线程的方式</span></a></h3><ul><li><code>Thread</code></li><li><code>Thread</code> + <code>Runnable</code></li><li><code>Thread</code> + <code>FutureTask&lt;V&gt;</code> + <code>Callable&lt;V&gt;</code></li><li>线程池</li><li><code>CompletableFuture&lt;T&gt;</code></li></ul><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h3><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h3><p>内置锁</p><p>可重入锁</p><p>读写锁</p><p>线程间通信</p><p>死锁</p><h3 id="并发编程工具" tabindex="-1"><a class="header-anchor" href="#并发编程工具"><span>并发编程工具</span></a></h3><h4 id="juc原子类" tabindex="-1"><a class="header-anchor" href="#juc原子类"><span>juc原子类</span></a></h4><h4 id="juc容器类" tabindex="-1"><a class="header-anchor" href="#juc容器类"><span>juc容器类</span></a></h4><h4 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span><code>ThreadLocal</code></span></a></h4><h4 id="countdownlatch" tabindex="-1"><a class="header-anchor" href="#countdownlatch"><span><code>CountdownLatch</code></span></a></h4><h4 id="locksupport" tabindex="-1"><a class="header-anchor" href="#locksupport"><span><code>LockSupport</code></span></a></h4><h4 id="volatile关键字" tabindex="-1"><a class="header-anchor" href="#volatile关键字"><span><code>volatile</code>关键字</span></a></h4><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h2><h3 id="jvm内存模型" tabindex="-1"><a class="header-anchor" href="#jvm内存模型"><span>JVM内存模型</span></a></h3><p>线程私有内存：</p><ul><li>程序计数器：记录当前线程字节码执行的位置，字节码解释器通过程序计数器选取下一条要执行的指令</li><li>虚拟机栈：方法调用栈，包含局部变量、操作数栈、动态链接、方法返回地址</li><li>本地方法栈：Native方法栈</li></ul><p>共享内存：</p><ul><li>堆：存放对象实例，是GC管理的主要区域，也称为GC堆</li><li>字符串常量池</li></ul><p>本地内存：</p><ul><li>直接内存</li></ul><h3 id="java对象的创建过程" tabindex="-1"><a class="header-anchor" href="#java对象的创建过程"><span>Java对象的创建过程</span></a></h3><p>主要包括以下几个步骤：</p><ol><li>加载类：通过ClassLoader将class文件加载到内存中，生成Class对象。类只会加载一次</li><li>链接 <ol><li>验证：确保字节码格式符合Java虚拟机规范</li><li>准备：为静态变量分配空间，并设置默认值(0, false, null)</li><li>解析：将类、接口、字段和方法的符号引用转换为直接引用</li></ol></li><li>初始化：执行静态变量赋值、静态代码块初始化操作，只会执行一次</li><li>创建对象：为对象分配内存空间，给实例变量设置默认值(0, false, null)，显式赋值、执行构造代码块和构造函数</li></ol><h3 id="java对象的定位方式" tabindex="-1"><a class="header-anchor" href="#java对象的定位方式"><span>Java对象的定位方式</span></a></h3><p>根据虚拟机的不同，有2种定位对象的方式：</p><ul><li>句柄：在堆中存储句柄，句柄中保存对象地址信息，栈上的引用。通过句柄定位堆中的对象</li><li>直接指针：栈中的引用存储的就是堆中的对象地址。</li></ul><p>HotSpot虚拟机使用直接指针的方式定位对象。</p><h3 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制"><span>垃圾回收机制</span></a></h3><p>Java自动内存管理的核心功能是管理堆中的对象的分配与回收。</p><p>引用技术法</p><p>可达性分析算法</p><h3 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制"><span>类加载机制</span></a></h3><p>3个内置的ClassLoader：</p><ul><li><code>BootstrapClassLoader</code>：启动类加载器，加载Java核心类库</li><li><code>ExtensionClassLoader</code>：扩展类加载器，加载扩展功能的类库</li><li><code>AppClassLoader</code>：应用类加载器，加载应用自身的类库</li></ul><p>双亲委派模型：除了启动类加载器，其它类加载器都有1个父类加载器。在加载类时：</p><ol><li>自底向上，逐层判断该类是否已被加载：是，直接返回；否，向上查找</li><li>如果到顶层类加载器，发现该类没有被加载过，则自顶向下，逐层尝试加载该类：成功，直接返回，失败，向下委托</li><li>如果到了开始的类加载器，依然没有加载成功，则抛出<code>ClassNotFoundException</code>异常</li></ol><h2 id="java新特性" tabindex="-1"><a class="header-anchor" href="#java新特性"><span>Java新特性</span></a></h2><h3 id="java8" tabindex="-1"><a class="header-anchor" href="#java8"><span>Java8</span></a></h3><h4 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口"><span>函数式接口</span></a></h4><h4 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>lambda表达式</span></a></h4><h4 id="stream流" tabindex="-1"><a class="header-anchor" href="#stream流"><span>Stream流</span></a></h4><h4 id="optional-api" tabindex="-1"><a class="header-anchor" href="#optional-api"><span><code>Optional</code> API</span></a></h4><h4 id="java-time日期时间api" tabindex="-1"><a class="header-anchor" href="#java-time日期时间api"><span><code>java.time</code>日期时间API</span></a></h4><h3 id="java9" tabindex="-1"><a class="header-anchor" href="#java9"><span>Java9</span></a></h3><h4 id="模块化系统" tabindex="-1"><a class="header-anchor" href="#模块化系统"><span>模块化系统</span></a></h4><h3 id="java10" tabindex="-1"><a class="header-anchor" href="#java10"><span>Java10</span></a></h3><h3 id="var局部变量类型推断" tabindex="-1"><a class="header-anchor" href="#var局部变量类型推断"><span><code>var</code>局部变量类型推断</span></a></h3>`,201)]))}const d=s(l,[["render",h],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/notes/interview/zytg44kc/","title":"Java基础面试题","lang":"zh-CN","frontmatter":{"title":"Java基础面试题","createTime":"2024/11/24 15:56:15","permalink":"/notes/interview/zytg44kc/"},"headers":[],"readingTime":{"minutes":10.59,"words":3176},"git":{"updatedTime":1733057441000,"contributors":[{"name":"ianping","email":"13520322212@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/ianping?v=4","url":"https://github.com/ianping"}]},"filePathRelative":"notes/interview/Java基础面试题.md","bulletin":false}');export{d as comp,k as data};
