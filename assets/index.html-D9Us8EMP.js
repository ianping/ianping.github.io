import{_ as s,c as a,b as n,o as l}from"./app-DsGHT65_.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="javaweb" tabindex="-1"><a class="header-anchor" href="#javaweb"><span>JavaWeb</span></a></h2><h3 id="javaweb-3大核心组件" tabindex="-1"><a class="header-anchor" href="#javaweb-3大核心组件"><span>JavaWeb 3大核心组件</span></a></h3><p>Servlet、Filter、Listener</p><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>MyBatis</span></a></h2><h3 id="mybatis的优缺点" tabindex="-1"><a class="header-anchor" href="#mybatis的优缺点"><span>mybatis的优缺点</span></a></h3><p>优点：</p><ul><li>sql语句与代码解耦</li><li>自动映射结果集</li><li>支持动态sql</li></ul><p>缺点：</p><ul><li>数据库移植性不好</li></ul><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span><code>#{}</code> 和 <code>\${}</code>的区别</span></a></h3><p><code>#{}</code>是预编译sql，<code>\${}</code>是字符串拼接sql</p><h3 id="mybatis插件原理" tabindex="-1"><a class="header-anchor" href="#mybatis插件原理"><span>MyBatis插件原理</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Intercepts</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">({@</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Signature</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> StatementHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">prepare</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {})})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> MyPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> props </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Invocation</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">执行sql之前的逻辑</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">        StatementHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> statementHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">StatementHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">        BoundSql</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> boundSql </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> statementHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getBoundSql</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> parameterObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> boundSql</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getParameterObject</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">proceed</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">执行sql之后的逻辑</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Object</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> setProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Properties</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">props </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jpa" tabindex="-1"><a class="header-anchor" href="#jpa"><span>JPA</span></a></h2><h2 id="spring、springboot" tabindex="-1"><a class="header-anchor" href="#spring、springboot"><span>Spring、SpringBoot</span></a></h2><h3 id="对spring核心ioc和aop的理解" tabindex="-1"><a class="header-anchor" href="#对spring核心ioc和aop的理解"><span>对Spring核心IOC和AOP的理解</span></a></h3><p>IOC，控制反转</p><p>AOP，面向切面编程</p><h3 id="springmvc工作流程" tabindex="-1"><a class="header-anchor" href="#springmvc工作流程"><span>SpringMVC工作流程</span></a></h3><p>关键类：<code>DispatcherServlet</code>，前端控制器</p><p>在接收到客户端请求后，执行以下步骤：</p><ol><li>在前端控制器接收到请求之前，执行<code>Filter</code>，对数据进行过滤和处理</li><li>前端控制器调用处理器映射器，根据请求找到对应的处理器，以及相关的处理器拦截器，封装为<code>HandlerExecutionChain</code>，返回给前端控制器</li><li>前端控制器调用处理器适配器，找到对应的控制器并执行</li><li>执行Handler，返回ModelAndView</li><li>调用ViewResolver解析视图，将ModelAndView中的数据填充到视图中</li><li>返回视图给客户端</li></ol><h3 id="springmvc的9大组件" tabindex="-1"><a class="header-anchor" href="#springmvc的9大组件"><span>SpringMVC的9大组件</span></a></h3><ol><li><p><code>HandlerMapping</code>：处理器映射器，根据HTTP请求（请求方法、URL、参数等）匹配处理器，并将其与相关的拦截器封装为<code>HandlerExecutionChain</code>。</p></li><li><p><code>HandlerAdapter</code>：处理器适配器</p></li><li><p><code>HandlerExceptionResolver</code>：处理器异常解析器</p></li><li><p><code>ViewResolver</code>：视图解析器</p></li><li><p><code>RequestToViewNameTranslator</code>：在控制器方法中没有返回视图逻辑名称的时候，从请求对象中解析出一个逻辑视图名称。</p></li><li><p><code>LocaleResolver</code>：用于国际化，根据请求头中的<code>Accept-Language</code>参数，返回不同的视图</p></li><li><p><code>ThemeResolver</code>：主题解析器</p></li><li><p><code>MultipartResolver</code>：解析<em>multipart/form-data</em>类型的请求参数</p></li><li><p><code>FlashMapManager</code></p></li></ol><h3 id="spring中的bean的作用域和生命周期" tabindex="-1"><a class="header-anchor" href="#spring中的bean的作用域和生命周期"><span>Spring中的Bean的作用域和生命周期</span></a></h3><p>作用域：默认为单例的，包括singleton、prototype、Session、Request、ServletContext、webSocket。</p><p>生命周期：</p><ol><li>解析配置，创建<code>BeanDefinition</code></li><li>Bean实例化，<code>BeanFactory</code>的实现类会根据<code>BeanDefinition</code>创建Bean实例</li><li>属性赋值</li><li>Bean初始化，通过<code>InitializingBean#afterPropertiesSet()</code>方法，或者<code>@PostConstruct</code>注解的方法，或者<code>@Bean</code>的<code>init-method</code>属性设置</li><li>Bean使用</li><li>Bean销毁，通过<code>DisposableBean#destroy()</code>方法，或者<code>@PreDestroy</code>注解的方法，或者<code>@Bean</code>的<code>destroy-method</code>属性设置</li></ol><h3 id="spring-bean的3级缓存机制以及循环依赖问题" tabindex="-1"><a class="header-anchor" href="#spring-bean的3级缓存机制以及循环依赖问题"><span>Spring Bean的3级缓存机制以及循环依赖问题</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> DefaultSingletonBeanRegistry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> SimpleAliasRegistry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> SingletonBeanRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">	/** Cache of singleton objects: bean name to bean instance. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> singletonObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    /** Cache of early singleton objects: bean name to bean instance. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> earlySingletonObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">	/** Cache of singleton factories: bean name to ObjectFactory. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> ObjectFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> singletonFactories </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>singletonObjects：一级缓存，存放已经完成初始化的Bean实例</li><li>earlySingletonObjects：二级缓存，存放已创建、还未完全初始化的Bean实例。由于Bean依赖其它Bean而无法完成初始化时，会存放到二级缓存中</li><li>singletonFactories：三级缓存，存放Bean工厂对象。</li></ul><p>循环依赖问题的解决流程：</p><ol><li>A依赖B，B也依赖A，Spring容器会首先尝试创建A</li><li>创建A的过程中，会将其ObjectFactory放到三级缓存中</li><li>发现A依赖B，容器会在缓存中查找B，发现B未创建，会开始创建B</li><li><strong>在创建B的过程中，发现B依赖A，Spring会从三级缓存中获取A的ObjectFactory实例，创建一个尚未完全初始化的A实例，将其放到二级缓存中。同时，从三级缓存中移除A的ObjectFactory实例</strong></li><li>B完成初始化，放到一级缓存中，至此，B创建完毕</li><li>回到初始化A的流程，从二级缓存中获取未完全初始化的A实例，从一级缓存中获取初始化完成的B，一起完成A的初始化，将A放到一级缓存中。至此A也创建完毕</li></ol><p><strong>循环依赖解决的关键是，先创建对象，然后初始化赋值。因此，不能使用构造器注入，而要使用Setter方法注入。</strong></p><h3 id="spring中单例bean是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#spring中单例bean是线程安全的吗"><span>Spring中单例Bean是线程安全的吗？</span></a></h3><h3 id="spring事务传播机制" tabindex="-1"><a class="header-anchor" href="#spring事务传播机制"><span>Spring事务传播机制</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	REQUIRED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_REQUIRED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	SUPPORTS</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_SUPPORTS</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	MANDATORY</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_MANDATORY</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	REQUIRES_NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_REQUIRES_NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	NOT_SUPPORTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_NOT_SUPPORTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	NEVER</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_NEVER</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	NESTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_NESTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring事务隔离级别" tabindex="-1"><a class="header-anchor" href="#spring事务隔离级别"><span>Spring事务隔离级别</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Isolation</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">ISOLATION_DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	READ_UNCOMMITTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">ISOLATION_READ_UNCOMMITTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	READ_COMMITTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">ISOLATION_READ_COMMITTED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	REPEATABLE_READ</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">ISOLATION_REPEATABLE_READ</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">	SERIALIZABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">ISOLATION_SERIALIZABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring编程式事务" tabindex="-1"><a class="header-anchor" href="#spring编程式事务"><span>Spring编程式事务</span></a></h3><p>3个核心接口：<code>TransactionManager</code>、<code>TransactionDefinition</code>、<code>TransactionStatus</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 创建TransactionDefinition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">DefaultTransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> txDef </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> DefaultTransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txDef</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">myTx</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txDef</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setIsolationLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">ISOLATION_DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txDef</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setPropagationBehavior</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">PROPAGATION_REQUIRED</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txDef</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">TIMEOUT_DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txDef</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">setReadOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">// 开始事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">TransactionStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> txStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> txManager</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txDef</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    txManager</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> catch</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Exception</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    txManager</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">txStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring事务实现原理" tabindex="-1"><a class="header-anchor" href="#spring事务实现原理"><span>Spring事务实现原理</span></a></h3><p>编程式事务手动控制事务的开启、提交、回滚。</p><p>声明式事务基于AOP实现，在执行业务逻辑前关闭事务自动提交功能，执行成功就提交，失败就回滚。</p><h3 id="spring事务失效的情况" tabindex="-1"><a class="header-anchor" href="#spring事务失效的情况"><span>Spring事务失效的情况</span></a></h3><ul><li>不被Spring容器管理的Bean</li><li><code>@Transactional</code>注解的方法访问修饰符必须是public</li><li>数据库本身不支持的事务隔离级别</li><li>异常被忽略（被捕获，或者不在rollbackFor参数列表中，或者在noRollbackFor参数列表中，事务不会回滚）</li></ul><h3 id="spring中使用了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#spring中使用了哪些设计模式"><span>Spring中使用了哪些设计模式</span></a></h3><p>单例模式：单例Bean</p><p>工厂模式：BeanFactory、WebServerFactory</p><p>模板方法模式：RestTemplate、JdbcTemplate</p><p>动态代理模式：AOP</p><p>适配器模式：HandlerAdapter</p><p>装饰器模式：BeanWrapper</p><p>观察者模式：Spring中的事件监听机制</p><p>建造者模式：Builder</p><h3 id="spring、springmvc和springboot的关系" tabindex="-1"><a class="header-anchor" href="#spring、springmvc和springboot的关系"><span>Spring、SpringMVC和SpringBoot的关系</span></a></h3><p>SpringBoot是一个脚手架，在Spring IOC容器和AOP的基础上，实现了自动配置。通过特定场景的starter，自动管理依赖，并自动配置。</p><h3 id="对springboot的核心特性的理解" tabindex="-1"><a class="header-anchor" href="#对springboot的核心特性的理解"><span>对SpringBoot的核心特性的理解</span></a></h3><p>包括嵌入式Web服务器、自动配置、starter启动器、外部化配置、devtools、actuator、cli等。</p><h3 id="springboot核心注解" tabindex="-1"><a class="header-anchor" href="#springboot核心注解"><span>SpringBoot核心注解</span></a></h3><ul><li><code>@SpringBootApplication</code>：是一个组合注解，包括<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code></li><li><code>@Conditional</code>：条件化配置注解，需要一个<code>Condition</code>参数。SpringBoot预定义了一些条件化注解，例如：<code>@ConditionalOnClass</code>、<code>@ConditionalOnBean</code>等</li></ul><h3 id="springboot自动配置的实现原理" tabindex="-1"><a class="header-anchor" href="#springboot自动配置的实现原理"><span>SpringBoot自动配置的实现原理</span></a></h3><p>1.<code>@SpringBootApplication</code>包含了<code>@EnableAutoConfiguration</code>注解，启用自动配置功能；</p><p>2.<code>@EnableAutoConfiguration</code>包含了<code>@Import(AutoConfigurationImportSelector.class)</code>注解，通过<code>ImportSelector</code>动态选择要导入Spring容器的配置类</p><p>3.读取<em>META-INF</em>下的配置信息</p><p>4.读取<code>@AutoConfiguration</code>配置类</p><p>5.使用条件化装配注入Bean</p><h2 id="springsecurity" tabindex="-1"><a class="header-anchor" href="#springsecurity"><span>SpringSecurity</span></a></h2><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务"><span>微服务</span></a></h2><h3 id="cap理论和base理论" tabindex="-1"><a class="header-anchor" href="#cap理论和base理论"><span>CAP理论和BASE理论</span></a></h3><p>CAP：Consistency（一致性）、Availability（可用性）和 Partition tolerance（分区容错性）。</p><p>BASE：基本可用（Basically Available）、软状态（Soft State）和最终一致性（Eventual Consistency）。</p><h3 id="rpc和rmi" tabindex="-1"><a class="header-anchor" href="#rpc和rmi"><span>RPC和RMI</span></a></h3><h3 id="分布式架构中的session共享方案" tabindex="-1"><a class="header-anchor" href="#分布式架构中的session共享方案"><span>分布式架构中的Session共享方案</span></a></h3><h3 id="分布式id实现方法" tabindex="-1"><a class="header-anchor" href="#分布式id实现方法"><span>分布式ID实现方法</span></a></h3><h3 id="分布式锁解决方案" tabindex="-1"><a class="header-anchor" href="#分布式锁解决方案"><span>分布式锁解决方案</span></a></h3><h3 id="分布式事务解决方案" tabindex="-1"><a class="header-anchor" href="#分布式事务解决方案"><span>分布式事务解决方案</span></a></h3>`,78)]))}const k=s(e,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/notes/interview/xiczg50w/","title":"Java开发框架面试题","lang":"zh-CN","frontmatter":{"title":"Java开发框架面试题","createTime":"2024/11/24 15:56:15","permalink":"/notes/interview/xiczg50w/"},"headers":[],"readingTime":{"minutes":5.72,"words":1717},"git":{"updatedTime":1733057441000,"contributors":[{"name":"ianping","email":"13520322212@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/ianping?v=4","url":"https://github.com/ianping"}]},"filePathRelative":"notes/interview/Java开发框架面试题.md","bulletin":false}');export{k as comp,r as data};
