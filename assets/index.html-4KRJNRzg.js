import{_ as s,c as a,b as l,o as n}from"./app-DsGHT65_.js";const e={};function h(t,i){return n(),a("div",null,i[0]||(i[0]=[l(`<p>封装、继承、多态、组合、聚合</p><h2 id="方法重载与重写" tabindex="-1"><a class="header-anchor" href="#方法重载与重写"><span>方法重载与重写</span></a></h2><h2 id="java对象初始化过程" tabindex="-1"><a class="header-anchor" href="#java对象初始化过程"><span>Java对象初始化过程</span></a></h2><p>当使用<code>new</code>关键字创建1个对象的时候，Java对象初始化过程需要经过：类加载、实例化、构造3个阶段：</p><h3 id="_1-类加载过程" tabindex="-1"><a class="header-anchor" href="#_1-类加载过程"><span>1.类加载过程</span></a></h3><p>JVM加载类文件（1个类只会加载1次）：</p><ul><li>初始化静态成员变量</li><li>按照定义顺序，依次执行静态代码块</li></ul><p>如果存在父类，会先加载父类，然后再加载子类。</p><h3 id="_2-实例化过程" tabindex="-1"><a class="header-anchor" href="#_2-实例化过程"><span>2.实例化过程</span></a></h3><p>在堆内存中为该对象分配内存空间，然后：</p><ul><li>初始化实例成员变量</li></ul><p>如果存在父类，会先初始化父类中的实例成员变量，然后再初始化子类成员变量。</p><h3 id="_3-构造过程" tabindex="-1"><a class="header-anchor" href="#_3-构造过程"><span>3.构造过程</span></a></h3><p>执行构造函数：</p><ul><li><p>按照定义顺序，依次执行初始化代码块</p></li><li><p>执行构造函数</p></li></ul><p>如果存在父类，会先执行父类中的初始化代码块和构造函数，然后再执行子类中的初始化代码块和构造函数。</p><p>另外，如果子类构造函数中没有显式的调用父类构造函数，默认调用父类的无参构造函数，示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java访问修饰符" tabindex="-1"><a class="header-anchor" href="#java访问修饰符"><span>Java访问修饰符</span></a></h2><p>访问修饰符用于限定类、变量、方法、构造器的可见范围，包括：</p><ul><li><code>public</code>，公共访问修饰符</li><li><code>protected</code>，保护访问修饰符，可以被同一个包内的类，以及其子类（无论是否在同一个包内）访问</li><li><code>default</code>，默认访问修饰符，只能被同一个包内的类访问，因此也称&quot;包访问修饰符&quot;</li><li><code>private</code>，私有访问修饰符，只能在类内部访问。</li></ul><h2 id="static修饰符" tabindex="-1"><a class="header-anchor" href="#static修饰符"><span><code>static</code>修饰符</span></a></h2><p><code>static</code>修饰符用于创建类级别的成员：</p><ul><li>静态变量</li><li>静态方法</li><li>静态代码块</li><li>静态内部类</li></ul><h2 id="final修饰符" tabindex="-1"><a class="header-anchor" href="#final修饰符"><span><code>final</code>修饰符</span></a></h2><ul><li><code>final</code>修饰类，则该类不能被继承</li><li><code>final</code>修饰方法，则该方法不能被重写</li><li><code>final</code>修饰变量，则该变量只能被赋值1次。</li></ul><p><code>final</code>变量在使用前必须先赋值：</p><ul><li>对于成员变量，可以在静态代码块、初始化代码块、构造器中进行赋值</li><li>对于局部变量，在使用变量前赋值即可</li></ul><h2 id="与equals-的区别" tabindex="-1"><a class="header-anchor" href="#与equals-的区别"><span><code>==</code>与<code>equals()</code>的区别</span></a></h2><p><code>==</code> 和 <code>equals()</code> 是用于比较对象的两种不同方式：</p><ul><li><p><code>==</code>运算符比较2个对象的内存地址是否相等，即是否引用同一个对象实例。</p></li><li><p><code>equals()</code>方法比较2个对象的内容是否相同。</p></li></ul><p>默认情况下，<code>equals()</code>比较2个对象的内存地址是否相等，等价于<code>==</code>，<code>Object</code>中的<code>equals()</code>源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下，子类需要重写<code>equals()</code>，自定义对象相等性比较规则。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes github-light material-theme-darker vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Cloneable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> salary</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;"> LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> hireDay</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // getters/setters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">Object</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">o </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> ||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;"> getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">())</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;"> // 或者使用instanceof进行判断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C792EA;">        Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> employee </span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> employee</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">                &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Double</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">employee</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> salary</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">                &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">hireDay</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> employee</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">hireDay</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const p=s(e,[["render",h],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/notes/java/8qsldi0x/","title":"Java面向对象编程核心思想","lang":"zh-CN","frontmatter":{"title":"Java面向对象编程核心思想","createTime":"2024/11/24 15:56:15","permalink":"/notes/java/8qsldi0x/"},"headers":[],"readingTime":{"minutes":2.63,"words":788},"git":{"updatedTime":1733057441000,"contributors":[{"name":"ianping","email":"13520322212@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/ianping?v=4","url":"https://github.com/ianping"}]},"filePathRelative":"notes/java/1.Java基础/Java面向对象编程核心思想.md","bulletin":false}');export{p as comp,d as data};
