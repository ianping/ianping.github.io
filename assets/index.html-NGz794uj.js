import{_ as i,c as n,b as e,o as l}from"./app-DsGHT65_.js";const s={};function p(r,a){return l(),n("div",null,a[0]||(a[0]=[e('<h2 id="软件架构" tabindex="-1"><a class="header-anchor" href="#软件架构"><span>软件架构</span></a></h2><h2 id="服务拆分策略" tabindex="-1"><a class="header-anchor" href="#服务拆分策略"><span>服务拆分策略</span></a></h2><h2 id="进程间通信" tabindex="-1"><a class="header-anchor" href="#进程间通信"><span>进程间通信</span></a></h2><h2 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务"><span>分布式事务</span></a></h2><h3 id="cap定理" tabindex="-1"><a class="header-anchor" href="#cap定理"><span>CAP定理</span></a></h3><p>CAP定理3个核心概念：</p><ul><li><strong>Consistency</strong>，一致性</li><li><strong>Availability</strong>，可用性</li><li><strong>Partition Tolerance</strong>，分区容错性</li></ul><p>CAP 定理指出，在分布式系统中，最多只能同时满足其中的两个属性，而无法同时满足三个属性。</p><h3 id="base理论" tabindex="-1"><a class="header-anchor" href="#base理论"><span>BASE理论</span></a></h3><p>BASE理论3个核心 概念：</p><ul><li><strong>Basic Availability</strong>，基本可用性</li><li><strong>Soft State</strong>，软状态</li><li><strong>Eventual Consistency</strong>，最终一致性</li></ul><p>BASE 理论强调在分布式系统中，无法保证强一致性的情况下，应该追求基本可用性、软状态和最终一致性。</p><h3 id="分布式事务解决方案" tabindex="-1"><a class="header-anchor" href="#分布式事务解决方案"><span>分布式事务解决方案</span></a></h3><h4 id="_2阶段提交" tabindex="-1"><a class="header-anchor" href="#_2阶段提交"><span>2阶段提交</span></a></h4><p>2阶段提交(<strong>Two-Phase Commit，2PC</strong>)，通过2个阶段来确保分布式事务操作的一致性。</p><h4 id="补偿事务" tabindex="-1"><a class="header-anchor" href="#补偿事务"><span>补偿事务</span></a></h4><h4 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h4><h2 id="api网关" tabindex="-1"><a class="header-anchor" href="#api网关"><span>API网关</span></a></h2><h2 id="外部化配置" tabindex="-1"><a class="header-anchor" href="#外部化配置"><span>外部化配置</span></a></h2><h2 id="微服务部署模式" tabindex="-1"><a class="header-anchor" href="#微服务部署模式"><span>微服务部署模式</span></a></h2><h2 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型"><span>技术选型</span></a></h2><p><strong>微服务核心功能</strong></p><p>API网关、配置中心、注册中心、HTTP请求客户端、负载均衡器、断路器、分布式事务、链路追踪、服务监控。</p><p><strong>SpringCloud技术栈</strong></p><ul><li><p>API网关：Spring Cloud Gateway、Netflix Zuul</p></li><li><p>配置中心：Spring Cloud Config、Nacos</p></li><li><p>注册中心：Eureka、Nacos</p></li><li><p>服务间通信：RestTemplate、OpenFeign</p></li><li><p>客户端负载均衡器：Ribbon、Spring Cloud LoadBalancer</p></li><li><p>熔断降级：Hystrix、Sentinel、Resilience4j</p></li><li><p>分布式事务：Seata</p></li><li><p>消息队列：Spring Cloud Stream + Kafka、RabbitMQ、RocketMQ</p></li><li><p>链路跟踪</p></li><li><p>日志中心</p></li></ul><p><strong>SpringCloud技术选型最佳实践</strong></p><p>官方技术栈：</p><ul><li>API网关：Spring Cloud Gateway</li><li>配置中心：Spring Cloud Config</li><li>注册中心：Eureka</li><li>客户端负载均衡器：Spring Cloud LoadBalancer</li><li>断路器：Resilience4j</li><li>服务间通信：OpenFeign</li></ul><p>Alibaba技术栈：</p><ul><li>API网关：Spring Cloud Gateway</li><li>配置中心：Nacos</li><li>注册中心：Nacos</li><li>客户端负载均衡器：Spring Cloud LoadBalancer</li><li>服务间通信：OpenFeign</li><li>分布式事务：Seata</li><li>断路器：Sentinel</li></ul><p><strong>服务间通信技术</strong></p><ol><li>RestTemplate + LoadBalancer</li><li>OpenFeign + LoadBalancer</li></ol><p><strong>分布式事务解决方案</strong></p><p>2PC：2阶段提交</p><p>3PC：3阶段提交</p><p>TCC：</p><p>最终一致性方案：</p>',37)]))}const o=i(s,[["render",p],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/notes/java/oxcm8krc/","title":"微服务理论知识","lang":"zh-CN","frontmatter":{"title":"微服务理论知识","createTime":"2024/11/24 15:56:15","permalink":"/notes/java/oxcm8krc/"},"headers":[],"readingTime":{"minutes":1.69,"words":506},"git":{"updatedTime":1732441916000,"contributors":[{"name":"ianping","email":"13520322212@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/ianping?v=4","url":"https://github.com/ianping"}]},"filePathRelative":"notes/java/springcloud/微服务理论知识.md","bulletin":false}');export{o as comp,h as data};
